// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum MIME {
  image_jpeg
  image_png
  image_gif
  image_webp
  image_svg_xml
}

enum Role {
  leading
  supporting
  background
}

enum Gender {
  male
  female
}

model users {
  id Int @id @unique @default(autoincrement())
  username String @unique @db.VarChar(15)
  first_name String @db.VarChar(15)
  last_name String @db.VarChar(15)
  email String @unique @db.VarChar(320)
  password String
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  avatar files @relation(fields: [avatar_id], references: [id])
  avatar_id Int @unique
}

model files {
  id Int @id @unique @default(autoincrement())
  file_name String @db.VarChar(15)
  mime_type MIME
  key String
  url String
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  users users?
  characters characters?
  directors directors?
  persons persons?
}

model movies {
  id Int @id @unique @default(autoincrement())
  title String @unique @db.VarChar(20)
  description String
  budget Int
  release_date DateTime
  duration Int
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  director directors @relation(fields: [director_id], references: [id])
  director_id Int @unique

  genre genres @relation(fields: [genre_id], references: [id])
  genre_id Int

  movies_characters movies_characters[]
  movie_genres movie_genres[]
}

model movie_genres {
  movie movies @relation(fields: [movie_id], references: [id])
  movie_id Int
  genre genres @relation(fields: [genre_id], references: [id])
  genre_id Int

  @@id([movie_id, genre_id])
}

model genres {
  id Int @id @unique @default(autoincrement())
  genre String @db.VarChar(15)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  movies movies[]
  movie_genres movie_genres[]
}

model directors {
  id Int @id @unique @default(autoincrement())
  name String @db.VarChar(15)
  surname String @db.VarChar(15)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  file files @relation(fields: [file_id], references: [id])
  file_id Int @unique

  movie movies?
}

model characters {
  id Int @id @unique @default(autoincrement())
  name String @db.VarChar(15)
  description String
  role Role
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  
  person persons @relation(fields: [person_id], references: [id])
  person_id Int @unique
  
  file files @relation(fields: [file_id], references: [id])
  file_id Int @unique

  movies_characters movies_characters[]
}

model movies_characters {
  movie movies @relation(fields: [movie_id], references: [id])
  movie_id Int
  character characters @relation(fields: [character_id], references: [id])
  character_id Int

  @@id([movie_id, character_id])
}

model persons {
  id Int @id @unique @default(autoincrement())
  first_name String @db.VarChar(15)
  last_name String @db.VarChar(15)
  biography String
  date_of_birth DateTime
  gender Gender
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  file files @relation(fields: [file_id], references: [id])
  file_id Int @unique

  character characters?
}